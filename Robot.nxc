// Movement
#define MAX_DISTANCE_MS 0.31
#define DISTANCE_TIRES_MM 165

// Optic Sensor
#define THRESHOLD 40

// Event Constants
#define MIN_DISTANCE 0 // TODO: Enddistanz ausmessen
#define BALL_DISTANCE 0 // TODO: Ballabwurfdistanz ausmessen
#define LOAD_TIME 0 // TODO: Beladezeit rausfinden
#define FELT_DOWN 0 // TODO: Abstand fÃ¼r Schiebeaufgabe
#define START_TURN_DISTANCE 20 // TODO: Satz des Pythagoras

// Dumping
#define DUMP_TIME 1
#define DUMP_SPEED 50

enum State { START, DEF, GET, PUSH, END } current_state;
int whiteCount = 0;

sub eventChecker() {
	if (SENSOR_1 > THRESHOLD && SENSOR_2 > THRESHOLD && SENSOR_3 > THRESHOLD && current_state != START) {
		whiteCount++;
	}	else if (SENSOR_1 <= THRESHOLD && SENSOR_2 <= THRESHOLD && SENSOR_3 <= THRESHOLD && SensorUS(IN_4) < MIN_DISTANCE) {
		current_state = END;
	}	else if (whiteCount >= 3) {
		current_state = PUSH;
	}	else if (SensorUS(IN_4) < BALL_DISTANCE) {
		current_state = GET;
	}
}

sub turn_degrees(float degrees, int speed) {
	float signedSpeed = speed * (degrees / abs(degrees));
	OnFwd(OUT_A, signedSpeed);
	OnRev(OUT_B, signedSpeed);
	float distance = abs(PI * DISTANCE_TIRES_MM * (degrees / 360.0));
	float velocity = MAX_DISTANCE_MS * (speed / 100.0);
	int waitTime = distance / velocity;
	Wait(waitTime);
	Off(OUT_AB);
}

sub start_session() {
	if (SensorUS(IN_4) < START_TURN_DISTANCE && SENSOR_2 > THRESHOLD) {
		turn_degrees(200, 100);
		current_state = DEF;
	}
}

sub dump() {
	Wait(500);
	Off(OUT_AB);
	OnFwd(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	OnRev(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	Off(OUT_C);
}

sub getSomeBalls() {
	Off(OUT_AB);
	Wait(LOAD_TIME);
	current_state = DEF;
}

sub pushItToTheLimit() {
	turn_degrees(90, 75);
	while (SensorUS(IN_4) < FELT_DOWN) {
		OnRev(OUT_AB, 50);
		Wait(10);
	}
	current_state = DEF;
}

inline float get_turn_degrees() {
	if(SENSOR_1 < THRESHOLD) {
		if(SENSOR_2 < THRESHOLD) {
			if(SENSOR_3 < THRESHOLD) {
				return 0;
			} else {
				return -19;
			}
		} else {
			if(SENSOR_3 < THRESHOLD) {
				return 0;
			} else {
				return -19;
			}
		}
	} else {
		if(SENSOR_2 < THRESHOLD) {
			if(SENSOR_3 < THRESHOLD) {
				return 9;
			} else {
				return 0;
			}
		} else {
			if(SENSOR_3 < THRESHOLD) {
				return 19;
			} else {
				return 0;
			}
		}
	}
}

sub move() {
	float degrees = get_turn_degrees();
	turn_degrees(degrees, 80);
	OnRev(OUT_AB, 100);
	Wait(10);
}

sub special() {
	switch(current_state) {
		case START:
			start_session();
		case GET:
			getSomeBalls();
			break;
		case PUSH:
			pushItToTheLimit();
			break;
		case END:
			dump();
			Stop(true);
			break;
	}
}

sub init() {
	current_state = START;
	//Sensor 1 LEFT 2 MIDDLE 3 RIGHT
	SetSensorLight(IN_1);
	SetSensorLight(IN_2);
	SetSensorLight(IN_3);
	SetSensorLowspeed(IN_4);
}

task main() {
	init();
	while(true) {
		special();
		move();
	}
}
