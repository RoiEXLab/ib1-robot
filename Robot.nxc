#define MAX_DISTANCE_MS 0.07705
#define DISTANCE_TIRES_MM 155
#define THRESHOLD 40
#define DUMP_TIME 3
#define DUMP_SPEED 50

sub turn_degrees(int degrees, int speed){
	int signedSpeed = speed * (degrees / abs(degrees));
	OnFwd(OUT_A, signedSpeed);
	OnRev(OUT_B, signedSpeed);
	float distance = abs(PI * DISTANCE_TIRES_MM * (degrees / 360.0));
	float velocity = MAX_DISTANCE_MS * (speed / 100.0) * 2;
	int waitTime = distance / velocity;
	Wait(waitTime);
	Off(OUT_AB);
}

sub dump(){
	Wait(500);
	Off(OUT_AB);
	OnRev(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	OnFwd(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	Off(OUT_C);
}

string state = "default";

inline int get_turn_degrees(){
	if(SENSOR_1 < THRESHOLD){
		if(SENSOR_2 < THRESHOLD){
			if(SENSOR_3 < THRESHOLD){
				state = "finish";
				return 0;
			} else {
				return -5;
			}
		} else {
			if(SENSOR_3 < THRESHOLD){
				return 0;
			} else {
				return -10;
			}
		}
	} else {
		if(SENSOR_2 < THRESHOLD){
			if(SENSOR_3 < THRESHOLD){
				return 5;
			} else {
				return 0;
			}
		} else {
			if(SENSOR_3 < THRESHOLD){
				return 10;
			} else {
				return 0;
			}
		}
	}
}

sub move(){
	int degrees = get_turn_degrees();
	TextOut(0, 0, NumToStr(degrees));
	turn_degrees(degrees, 80);
	OnRev(OUT_AB, 100);
	Wait(10);
}

sub special(){
	switch(state){
		case "finish":
			dump();
			Stop(true);
			break;
	}
}

sub init(){
	//Sensor 1 LEFT 2 Middle 3 Right
	SetSensorLight(IN_1);
	SetSensorLight(IN_2);
	SetSensorLight(IN_3);
}

task main(){
	init();
	while(true){
		if(state != "default"){
			special();
		}
		move();
	}
}
