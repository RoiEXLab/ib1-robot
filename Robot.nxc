// Movement
#define MAX_DISTANCE_MS 0.31
#define DISTANCE_TIRES_MM 165

// Optic Sensor
#define THRESHOLD 40

// Event Constants
#define START_TURN_DISTANCE 20
#define END_DISTANCE 20
#define BALL_LOAD_DISTANCE 15
#define OBSTACLE_CONTACT_DISTANCE 15

// Dumping
#define DUMP_TIME 1
#define DUMP_SPEED 50

enum State {
	INIT,
	MOVE_1,
	GET,
	MOVE_2,
	PUSH,
	MOVE_3,
	MOVE_4,
	END
};
State currentState;
int whiteCount = 0;

sub move();

sub turnDegrees(int degrees, int speed) {
	float signedSpeed = speed * (degrees / (abs(degrees) * 1.0));
	OnFwd(OUT_A, signedSpeed);
	OnRev(OUT_B, signedSpeed);
	float distance = abs(PI * DISTANCE_TIRES_MM * (degrees / 360.0));
	float velocity = MAX_DISTANCE_MS * (speed / 100.0);
	int waitTime = distance / velocity;
	Wait(waitTime);
	Off(OUT_AB);
}

sub checkForSpecialEvent() {
	if ((SENSOR_1 > THRESHOLD || SENSOR_3 > THRESHOLD) && SENSOR_2 > THRESHOLD && currentState == MOVE_2) {
		whiteCount++;
		PlaySound(SOUND_DOUBLE_BEEP);
	}
  else if (SENSOR_1 <= THRESHOLD && SENSOR_2 <= THRESHOLD && SENSOR_3 <= THRESHOLD && SensorUS(IN_4) < END_DISTANCE && currentState == MOVE_4) {
		currentState = END;
	}
  else if (whiteCount >= 2 && currentState == MOVE_2) {
		currentState = PUSH;
	}
  else if (SensorUS(IN_4) < BALL_LOAD_DISTANCE && currentState == MOVE_1) {
		currentState = GET;
	}
  else if (currentState == MOVE_3){// && SENSOR_2 <= THRESHOLD && SENSOR_3 <= THRESHOLD) {
		//turnDegrees(110, 75); // TODO: This is inconsistent, use a dedicated state if enough time is left
		currentState = MOVE_4;
	}
}

sub turnAfterStart() {
	if (SensorUS(IN_4) < START_TURN_DISTANCE) {
    turnDegrees(90, 100);
    while(SENSOR_1 < THRESHOLD || SENSOR_2 >= THRESHOLD || SENSOR_3 < THRESHOLD){
     turnDegrees(5, 100);
    }
		currentState = MOVE_1;
	}
}

sub dump() {
	Wait(500);
	Off(OUT_AB);
	OnFwd(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	OnRev(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	Off(OUT_C);
}

sub catchBall() {
	Off(OUT_AB);
  until(SensorUS(IN_4) >= 20);
	currentState = MOVE_2;
}

sub pushObstacle() {
	//turnDegrees(105, 75);
	//while (SensorUS(IN_4) > OBSTACLE_CONTACT_DISTANCE) {
	//	move();
	//}
	//while (SensorUS(IN_4) <= OBSTACLE_CONTACT_DISTANCE) {
	//	move();
	//}
	//while (SensorUS(IN_4) > OBSTACLE_CONTACT_DISTANCE) {
	//	move();
	//}
	//turnDegrees(200, 75);
	currentState = MOVE_3;
}

inline int getTurnDegrees() {
	if(SENSOR_1 < THRESHOLD) {
		if(SENSOR_2 < THRESHOLD) {
			if(SENSOR_3 < THRESHOLD) {
				return 0;
			} else {
				return -19;
			}
		} else {
			if(SENSOR_3 < THRESHOLD) {
				return 0;
			} else {
				return -9;
			}
		}
	} else {
		if(SENSOR_2 < THRESHOLD) {
			if(SENSOR_3 < THRESHOLD) {
				return 9;
			} else {
				return 0;
			}
		} else {
			if(SENSOR_3 < THRESHOLD) {
				return 19;
			} else {
				return 0;
			}
		}
	}
}

sub move() {
	int degrees = getTurnDegrees();
	turnDegrees(degrees, 80);
	OnRev(OUT_AB, 100);
	Wait(10);
}

sub runSpecialEventIfAvailable() {
	switch(currentState) {
		case INIT:
			turnAfterStart();
			break;
		case GET:
			catchBall();
			break;
		case PUSH:
			pushObstacle();
			break;
		case END:
			dump();
			Stop(true);
			break;
	}
}

sub init() {
	currentState = INIT;
	//Sensor 1 LEFT 2 MIDDLE 3 RIGHT
	SetSensorLight(IN_1);
	SetSensorLight(IN_2);
	SetSensorLight(IN_3);
	SetSensorLowspeed(IN_4);
}

task main() {
	init();
	while(true) {
		checkForSpecialEvent();
		runSpecialEventIfAvailable();
		move();
	}
}
