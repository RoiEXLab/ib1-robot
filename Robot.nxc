#define MAX_DISTANCE_MS 0.07705
#define DISTANCE_TIRES_MM 155
#define THRESHOLD 40
#define MIN_DISTANCE 0 //TODO: Enddistanz ausmessen
#define BALL_DISTANCE 0 //TODO: Ballabwurfdistanz ausmessen
#define LOAD_TIME 0 //TODO: Beladezeit rausfinden
#define FELT_DOWN 0 //TODO: Abstand fÃ¼r Schiebeaufgabe
#define DUMP_TIME 1
#define DUMP_SPEED 50

enum State { DEF, GET, PUSH, END } current_state;
int whiteCount = 0; // Nazi Constant (zwar nicht konstant, aber nazi)

sub eventChecker() {
  if (SENSOR_1 > THRESHOLD && SENSOR_2 > THRESHOLD && SENSOR_3 > THRESHOLD) {
    whiteCount++; // Nazi spotted
  }
  else if (SENSOR_1 <= THRESHOLD && SENSOR_2 <= THRESHOLD && SENSOR_3 <= THRESHOLD && SENSOR_4 < MIN_DISTANCE) {
    current_state = END;
  }
  else if (whiteCount >= 3) {
    current_state = PUSH;
  }
  else if (SENSOR_4 < BALL_DISTANCE) {
    current_state = GET;
  }
}

sub turn_degrees(int degrees, int speed){
	int signedSpeed = speed * (degrees / abs(degrees));
	OnFwd(OUT_A, signedSpeed);
	OnRev(OUT_B, signedSpeed);
	float distance = abs(PI * DISTANCE_TIRES_MM * (degrees / 360.0));
	float velocity = MAX_DISTANCE_MS * (speed / 100.0) * 2;
	int waitTime = distance / velocity;
	Wait(waitTime);
	Off(OUT_AB);
}

sub dump(){
	Wait(500);
	Off(OUT_AB);
	OnFwd(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	OnRev(OUT_C, DUMP_SPEED);
	Wait(DUMP_TIME * 1000);
	Off(OUT_C);
}

sub getSomeBalls() {
  Off(OUT_AB);
  Wait(LOAD_TIME);
  current_state = DEF;
}

sub pushItToTheLimit() {
  while (SENSOR_4 < FELT_DOWN) {
    OnRev(OUT_AB, 50);
    Wait(10);
  }
  current_state = DEF;
}

inline int get_turn_degrees(){
	if(SENSOR_1 < THRESHOLD){
		if(SENSOR_2 < THRESHOLD){
			if(SENSOR_3 < THRESHOLD){
				return 0;
			} else {
				return -5;
			}
		} else {
			if(SENSOR_3 < THRESHOLD){
				return 0;
			} else {
				return -10;
			}
		}
	} else {
		if(SENSOR_2 < THRESHOLD){
			if(SENSOR_3 < THRESHOLD){
				return 5;
			} else {
				return 0;
			}
		} else {
			if(SENSOR_3 < THRESHOLD){
				return 10;
			} else {
				return 0;
			}
		}
	}
}

sub move(){
	int degrees = get_turn_degrees();
	TextOut(0, 0, NumToStr(degrees));
	turn_degrees(degrees, 80);
	OnRev(OUT_AB, 100);
	Wait(10);
}

sub special(){
	switch(current_state){
    case GET:
      getSomeBalls();
      break;
    case PUSH:
      pushItToTheLimit();
      break;
		case END:
			dump();
			Stop(true);
			break;
	}
}

sub init(){
  current_state = DEF;
	//Sensor 1 LEFT 2 Middle 3 Right
	SetSensorLight(IN_1);
	SetSensorLight(IN_2);
	SetSensorLight(IN_3);
	SetSensorUltrasonic(IN_4);
}

task main(){
  init();
	while(true){
	  special();
		move();
	}
}
